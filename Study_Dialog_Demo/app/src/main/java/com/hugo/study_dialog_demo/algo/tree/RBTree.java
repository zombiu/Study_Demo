package com.hugo.study_dialog_demo.algo.tree;

/**
 * 红黑树
 */
public class RBTree {

    // 红黑树插入操作：
    // 特别注意：这里一定是在叶子结点中进行插入操作，12种情况
    /**
     * 1.有四种情况，父节点是黑色的，如果插入的父节点是黑色，因为插入的节点是红色，那么不用做任何处理，这棵树本来就是满足红黑树的五种性质，是平衡的。
     * 2.其他8种情况，父节点是红色：
     * 1>有四种情况，如果叔叔节点是黑色，将父节点染黑，祖父节点染红，然后进行旋转
     * a.LL情况，如果插入节点是父节点的左子树，父节点是祖父节点的左子树，那么对祖父节点进行右旋。
     *
     * b。LR情况，如果插入节点是父节点的右子树，父节点是祖父节点的左子树，那么先对父节点进行左旋，然后按照1>进行染色，再对祖父节点进行右旋
     *
     * c.RR情况，如果插入节点是父节点的右子树，父节点是祖父节点的右子树，那么对祖父节点进行左旋。
     *
     * d。RL情况，如果插入节点是父节点的左子树，父节点是祖父节点的右子树，那么先对父节点进行右旋，然后按照1>进行染色，再对祖父节点进行右旋
     *
     * 2>剩余四种情况，如果叔叔节点是红色(需要进行上溢)：
     * 将父节点、叔叔节点染黑，祖父节点染红，然后将祖父节点当做新插入的节点，进行恢复平衡的递归调用。
     */

    // 红黑树 删除操作
    // 这里需要注意:所有二叉搜索树的删除，都可以当做最终删除的是四阶b树的叶子节点，删除的叶子节点有8种情况
    /**
     * 1.有四种情况，删除的是红色节点，这种情况不会破坏红黑树的性质，不用处理。
     * 2.其他四种情况，删除的是黑色节点：
     * 1>有三种情况，删除的节点有红色子节点，那么使用红色子节点覆盖被删除节点，将节点涂黑。
     * 2>当删除节点没有红色子节点时，
     */
}
