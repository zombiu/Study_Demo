import com.example.buildsrc.MyTestPlugin

plugins {
    id 'com.android.application'
    id 'kotlin-android'
}
apply plugin: com.dorongold.gradle.tasktree.TaskTreePlugin
apply plugin: MyTestPlugin

/*apply plugin: Plugin2

class Plugin2 implements Plugin<Project> {

    @Override
    void apply(Project target) {
        println("custom plugin -->>this is a plugin in the file 'build.gradle'...")
        //定义 扩展，并且与 ExtConfig 进行绑定。
        ExtConfig extConfig = target.extensions.create('extConfig', ExtConfig.class)
        // 创建了一个 task  printExtConfig
        Task task = target.tasks.create('printExtConfig') {
            //通过 extConfig 属性，获取外部传递进来的 message 的具体内容。
            println("DemoPlugin message =" + target.extConfig.message)
            // task 执行完后 会去执行 doLast 这里可以拿到最新的 extension设置的值
            doLast {
                println("custom plugin -->> doLast message=${extConfig.message}")
            }

        }

        *//*target.afterEvaluate {
            println("custom plugin -->> doLast message=${project.extConfig.message}")
        }*//*
    }
}

class ExtConfig {
    String message = "this is old value"
}*/

// 配置扩展
extConfig {
    message = "this is new value"
    count 10
}

android {
    compileSdkVersion 32
//    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.example.study_gradle_plugin"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

// Task 执行实战：计算 build 执行期间的耗时
def startBuildTime, endBuildTime
// 1、在 Gradle 配置阶段完成之后进行操作，
// 以此保证要执行的 task 配置完毕
this.afterEvaluate { Project project ->
    // 2、找到当前 project 下第一个执行的 task，即 preBuild task
    def preBuildTask = project.tasks.getByName("preBuild")
    preBuildTask.doFirst {
        // 3、获取第一个 task 开始执行时刻的时间戳
        startBuildTime = System.currentTimeMillis()
    }
    // 4、找到当前 project 下最后一个执行的 task，即 build task
    def buildTask = project.tasks.getByName("build")
    buildTask.doLast {
        // 5、获取最后一个 task 执行完成前一瞬间的时间戳
        endBuildTime = System.currentTimeMillis()
        // 6、输出 build 执行期间的耗时
        println "Current project execute time is ${endBuildTime - startBuildTime}"
    }
}

